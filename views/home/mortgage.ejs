<%- include('../_partial/_header'); -%>

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Links -->
  <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.min.css">

  <!-- Result Style -->
  <style>
    #result {
  display: none;
  }
  </style>
  
  <!-- Background Style -->
  <style>
body, html {
  height: 100%;
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
}

* {
  box-sizing: border-box;
}

.bg-image{
  /* The image used */
  background-image: url("https://mdbootstrap.com/img/Photos/Horizontal/Nature/full page/img(11).webp");
  
  /* Add the blur effect */
  filter: blur(8px);
  -webkit-filter: blur(8px);
  
  /* Full height */
  height: 100vh; 
  
  /* Center and scale the image nicely */
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

/* Position text in the middle of the page/image */
.bg-text {
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
  color: white;
  font-weight: bold;
  border: 3px solid #f1f1f1;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
  width: 80%;
  padding: 20px;
  text-align: center;
}
</style>

</head>
</break>
<body class="bg-dark text-white">
  <div class="bg-image"></div>
  <div class="bg-text">
  <div class="container">
    <div class="row">
      <div class="col-md-6 mx-auto">
        <div class="card card-body my-5">
          <h1 class="display-5 text-center pb-3 text-white">Mortgage Loan Calculator</h1>
          <form id="loan-form">
            <label for="amount">Amount:</label>
            <input type="text" id="amount" class="form-control mb-2 input" placeholder="$">
            <p class="error-message m-0 p-0 text-danger small"></p>
            
            <label for="down">Down Payment:</label>
            <input type="text" id="down" class="form-control mb-2 input" placeholder="$">
            <p class="error-message m-0 p-0 text-danger small"></p>

            <label for="interest">Simple Interest:</label>
            <input type="text" id="interest" class="form-control mb-2 input" placeholder="%">
            <p class="error-message m-0 p-0 text-danger small"></p>

            <label for="years">Duration (Years):</label>
            <input type="text" id="years" class="form-control mb-2 input">
            <p class="error-message m-0 p-0 text-danger small"></p>
</break>
            <input type="button" class="form-control btn btn-primary btn-block my-2" id="create-loan" value="Create Loan">
          </form>
          </div>
</break>
          <!-- RESULTS -->
          <div id="result" class="pt-3">
            <h4>Payment Details</h4>
              <div class="input-group my-2">
                <span class="p-2 rounded-start border bg-secondary text-light">Monthly Payment $</span>
                <input type="number" id="monthly-payment" class="form-control" disabled="disabled">
              </div>

              <div class="input-group my-2">
                <span class="p-2 rounded-start border bg-secondary text-light">Total Payment $</span>
                <input type="number" id="total-payment" class="form-control" disabled="disabled">
              </div>

              <div class="input-group my-2">
                <span class="p-2 rounded-start border bg-secondary text-light">Total Simple Interest $</span>
                <input type="number" id="total-interest" class="form-control" disabled="disabled">
              </div>
          </div>

        </div>
      </div>
    </div>
  <!-- Scripts -->
    <script src="/node_modules/bootstrap/dist/js/bootstrap.js"></script>
  <!--Calculations Script -->
    <script>
const principle = document.getElementById('amount');
const down = document.getElementById('down');
const interest = document.getElementById('interest');
const duration = document.getElementById('years');
const resultDiv = document.getElementById('result');
const monthPay = document.getElementById('monthly-payment');
const totalPay = document.getElementById('total-payment');
const totalInt = document.getElementById('total-interest');
const createLoan = document.getElementById('create-loan');
const formLoan = document.getElementById('loan-form');
const inputFields = document.getElementsByClassName('input');
const errMesages = document.getElementsByClassName('error-message');

const inputs = Array.from(inputFields);
// Lunch function
lunchProgram()

// Lunch function
function lunchProgram() {
  // Check error on principle
  inputs.forEach(input => {
    input.addEventListener('keyup', inputErrHandler);
  })
  // Event on form submit (create loan)
  createLoan.addEventListener('click', createLoanEvent);

  // disable Submit button
  createLoan.setAttribute('disabled', 'disabled');
}

// Error Handler for the inputs
function inputErrHandler(e) {
  const input = Number(e.target.value),
        id = e.target.id;
  let borderColor = e.target.style;

  // Principle
  switch (id) {
    case 'amount':
      // Amount Range 
      if(input >= 50000) {
        borderColor['border-color'] = 'green';
        errMesages[0].innerText = '';

        // Consider the other input fields
        if (interest.style['border-color'].includes('green') && duration.style['border-color'].includes('green')) {
          createLoan.removeAttribute('disabled');
        }
      } else {
        borderColor['border-color'] = 'red';
        errMesages[0].innerText = 'Amount should not be less than $50,000';
        // Hide results
        resultDiv.style.display = 'none';
        // disable Submit button
        createLoan.setAttribute('disabled', 'disabled');
      }
      if (isNaN(input)) {
        errMesages[0].innerText = 'invalid Input';
      }
      // Checks for empty input
      if (input == '') {
        borderColor['border-color'] = '';
        errMesages[0].innerText = '';
      }
      break;
      case 'down':
      // Amount Range 
      if(input >=0 ) {
        borderColor['border-color'] = 'green';
        errMesages[1].innerText = '';

        // Consider the other input fields
        if (interest.style['border-color'].includes('green') && duration.style['border-color'].includes('green')) {
          createLoan.removeAttribute('disabled');
        }
      } else {
        borderColor['border-color'] = 'red';
        errMesages[1].innerText = 'Down Payment should not be less than $0';
        // Hide results
        resultDiv.style.display = 'none';
        // disable Submit button
        createLoan.setAttribute('disabled', 'disabled');
      }
      if (isNaN(input)) {
        errMesages[1].innerText = 'invalid Input';
      }
      // Checks for empty input
      if (input == '') {
        borderColor['border-color'] = '';
        errMesages[1].innerText = '';
      }
      break;
    case 'interest':
      if(input >= 0 && input <= 100) {
        borderColor['border-color'] = 'green';
        errMesages[2].innerText = '';

        // Consider the other input fields
        if (principle.style['border-color'].includes('green') && duration.style['border-color'].includes('green')) {
          createLoan.removeAttribute('disabled');
        }
      } else {
        borderColor['border-color'] = 'red';
        errMesages[2].innerText = 'interest is from 0 to 100';
        // Hide results
        resultDiv.style.display = 'none';
        // disable Submit button
        createLoan.setAttribute('disabled', 'disabled');
      }
      if (isNaN(input)) {
        errMesages[2].innerText = 'invalid Input';
      }
      // Checks for empty input
      if (input == '') {
        borderColor['border-color'] = '';
        errMesages[2].innerText = '';
      }
      break;
    case 'years':
      if(input >= 5 && input <= 30) {
        borderColor['border-color'] = 'green';
        errMesages[3].innerText = '';

        // Consider the other input fields
        if (interest.style['border-color'].includes('green') && principle.style['border-color'].includes('green')) {
          createLoan.removeAttribute('disabled');
        }
      } else {
        borderColor['border-color'] = 'red';
        errMesages[3].innerText = 'Duration should be 5 to 30 years';
        // Hide results
        resultDiv.style.display = 'none';
        // disable Submit button
        createLoan.setAttribute('disabled', 'disabled');
      }
      if (isNaN(input)) {
        errMesages[3].innerText = 'invalid Input';
      }
      
      // Checks for empty input
      if (input == '') {
        borderColor['border-color'] = '';
        errMesages[3].innerText = '';
      }
      break;
      default:
        break;
      }
}


// Event on form submit
function createLoanEvent(e) {
  // Show results
  resultDiv.style.display = 'none';
  // Get card body
  const card = document.querySelector('.card');
  // Create loader div
  const loadDiv = document.createElement('div');
  // Add attr
  loadDiv.className = 'loader my-2 text-center';

  // Load Image
  const createLoader = document.createElement('div');
  // Add Attributes
  createLoader.setAttribute('class', 'spinner-grow');
  createLoader.style.width = '150px';
  createLoader.style.height = '150px';

  // Append loadDiv to LoadImg
  loadDiv.appendChild(createLoader);
  // Append LoadDiv to DOM
  card.appendChild(loadDiv);
  
  // Set timeOut to Display result
  setTimeout(showResult, 2500);

  // e.preventDefault();
}

// display result 
function showResult() {
  // remove loader
  document.querySelector('.loader').remove();
  /*
  Formular for Simple interest
  I = P(1 + (rt/100))
  where
  I = simple Inerest
  P = Principle
  r = Rate (%)
  t = time (years)
  */

  // Declaring variables
  const loanDown = down.value;
  const loanAmount = (principle.value-down.value);
  const loanRate = interest.value;
  const loanYears = duration.value;

  // Calculations
  totalInt.value = ((loanAmount * (1 + ((loanRate * loanYears)/100))) - loanAmount).toFixed(2);
  totalPay.value = (Number(loanAmount) + Number(totalInt.value)).toFixed(2);
  monthPay.value = (totalPay.value/(12*loanYears)).toFixed(2);

  // Show results
  resultDiv.style.display = 'block';
}</script>
    
</div>
</body>
</html>